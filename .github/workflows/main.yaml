name: bridgestan tests

on:
  push:
    branches:
      - 'main'
  pull_request:
  workflow_dispatch: {}

env:
  CMDSTAN_VERSION: "2.30.1"

jobs:
  build_test_models:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.9]
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out github
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install cmdstanpy for cmdstan install
        run: |
          pip install cmdstanpy

      - name: CmdStan installation cacheing
        uses: actions/cache@v2
        with:
          path: ~/.cmdstan
          key: ${{ runner.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: Install CmdStan
        run: |
          python -m cmdstanpy.install_cmdstan --version "${{ env.CMDSTAN_VERSION }}" --cores 2

      # we use the cache here to build the Stan models once for multiple interfaces
      - name: Set up test model cache
        uses: actions/cache@v2
        id: test-models
        with:
          path: ./stan/
          key: ${{ hashFiles('**/*.stan', 'src/*') }}-${{ matrix.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: Build test models (Unix)
        if: matrix.os != 'windows-latest' && steps.test-models.outputs.cache-hit != 'true'
        run: |
          export CMDSTAN=$(python -c "import cmdstanpy; print(cmdstanpy.cmdstan_path())")/
          export BRIDGESTAN=$(pwd)
          bash stan/build_all.sh
        shell: bash

      - name: Build test models (Windows)
        if: matrix.os == 'windows-latest' && steps.test-models.outputs.cache-hit != 'true'
        run: |
          $env:BRIDGESTAN = $(pwd)
          $env:CMDSTAN = $(python -c "import cmdstanpy; print(cmdstanpy.cmdstan_path())")
          ./stan/build_all.ps1
        shell: pwsh

  test_python_client:
    needs: [build_test_models]
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.9, "3.10"]
      fail-fast: false
    steps:
      - name: Check out github
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore CmdStan
        uses: actions/cache@v2
        with:
          path: ~/.cmdstan
          key: ${{ runner.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: Restore built models
        uses: actions/cache@v2
        id: test-models
        with:
          path: ./stan/
          key: ${{ hashFiles('**/*.stan', 'src/*') }}-${{ matrix.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: Install package
        run: |
          cd python/
          pip install pytest
          pip install .

      - name: Run tests
        run: |
          cd python/
          pytest -v


  test_julia_client:
    needs: [build_test_models]
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false
    steps:
      - name: Check out github
        uses: actions/checkout@v2
      - name: Set up Julia
        uses: julia-actions/setup-julia@v1

      - name: Restore CmdStan
        uses: actions/cache@v2
        with:
          path: ~/.cmdstan
          key: ${{ runner.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: Restore built models
        uses: actions/cache@v2
        id: test-models
        with:
          path: ./stan/
          key: ${{ hashFiles('**/*.stan', 'src/*') }}-${{ matrix.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: Run tests
        run: |
          julia --project=./julia -t 2 -e "using Pkg; Pkg.test()"

  test_R_client:
    needs: [build_test_models]
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false
    steps:
      - name: Check out github
        uses: actions/checkout@v2

      - name: Install R
        uses: r-lib/actions/setup-r@v2

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          packages: |
            any::R6
            any::testthat

      - name: Restore CmdStan
        uses: actions/cache@v2
        with:
          path: ~/.cmdstan
          key: ${{ runner.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: Restore built models
        uses: actions/cache@v2
        id: test-models
        with:
          path: ./stan/
          key: ${{ hashFiles('**/*.stan', 'src/*') }}-${{ matrix.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: Run tests
        run: |
          cd R/tests/
          gcc -fpic -shared -o test_collisions.so test_collisions.c
          Rscript test_bridgestan.R
